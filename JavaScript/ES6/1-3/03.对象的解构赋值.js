/*
  对象也可以使用解构赋值
  和数组不同的是 数组的元素是按照次序排列的 变量取值由位置决定
  而对象是根据变量名去决定的
*/
var {foo, bar} = {foo: 'aaa', bar: 'bbb'}

// 如果变量名不一致 则需要按按照以下形式写
var {fff: ffa} = {fff: 'aaa', zzz: 'vvv'}
// 上面的赋值结果是 ffa为aaa
// 也就是说对象的解构赋值机制 是先找到同名属性 然后再给对于的变量赋值 真正被赋值的变量是后者而不是前者
// var {变量键: 变量名值} = {变量键: 值的值} 按照变量键去寻找 给变量名值赋上值的值

// 和数组一样 解构也可以用于嵌套解构的对象
var obj = {p: ['hello', {y: 'word'}]}
var {p: [x, {y}]} = obj

console.log(x) // hello
console.log(y) // word
// 这时候p是模式 不是变量

// 同样的 对象的解构也可以使用默认值 同样也是对象属性严格等于undefined
// 如果解构模式是嵌套的对象 那么子对象所在的父对象必须存在 否则会报错
// var {foo : {baz}} = {baz : 'aaa'} 会报错 因为baz的父对象foo没有被声明

// 对象的解构赋值 可以很方便的将现有对象的方法赋值到变量上
var {sin, cos, log} = Math
// 上面的代码将Math对象里面的三个函数分别赋值到对应名字的变量上
